summary: Smoke test for django-framework

execute: |
  rockcraft init --profile django-framework --name django-hello-world
  ROCKCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS=true rockcraft pack
  rockcraft.skopeo --insecure-policy copy --dest-tls-verify=false \
   oci-archive:django-hello-world_0.1_amd64.rock \
   docker://localhost:32000/django-hello-world:0.1

  mkdir charm
  cd charm
  charmcraft init --profile django-framework --name django-hello-world
  echo "requires: {postgresql: {interface: postgresql_client, optional: false, limit: 1}}" >> charmcraft.yaml

  if [ ! -z "$PAAS_CHARM_BRANCH" ]; then
      echo Using paas_charm $PAAS_CHARM_BRANCH
      echo "parts: {0-git: {plugin: nil, build-packages: [git]}}" >> charmcraft.yaml
      sed -i "s~paas-charm.*~paas-charm @ git+https://github.com/canonical/paas-charm@${PAAS_CHARM_BRANCH}~" requirements.txt
  fi

  CHARMCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS=true charmcraft fetch-libs
  CHARMCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS=true charmcraft pack

  juju deploy postgresql-k8s --channel 14/stable --trust

  juju deploy ./django-hello-world_ubuntu-22.04-amd64.charm django-hello-world \
   --resource django-app-image=localhost:32000/django-hello-world:0.1

  # once the django-allowed-hosts base url is ready, we could use directly something like
  # curl --fail django-hello-world.testing:8000 --resolve django-hello-world.testing:8000:${UNIT_IP}
  juju config django-hello-world django-allowed-hosts='*' django-debug=true

  juju integrate postgresql-k8s django-hello-world

  juju wait-for application django-hello-world

  UNIT_IP=$(juju status --format json | jq -r '.applications."django-hello-world".address') && echo $UNIT_IP
  retry -n 20 --wait 2 curl --fail "${UNIT_IP}:8000"
  [[ \"$(curl --fail "${UNIT_IP}:8000")\" =~ "The install worked successfully!" ]]
